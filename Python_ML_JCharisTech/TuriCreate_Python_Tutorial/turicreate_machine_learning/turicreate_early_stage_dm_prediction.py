# -*- coding: utf-8 -*-
"""TuriCreate-Early Stage DM Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iH0fYE048VjmULEVJ_Iyeow4nwfpGLq_

### Binary Classification with TuriCreate 
+ TuriCreate
  - made by Apple

#### Task
+ Predict Early stage diabetes risk 
+ https://archive.ics.uci.edu/ml/datasets/Early+stage+diabetes+risk+prediction+dataset.

#### Installation
+ pip install turicreate


#### Features
+ Easy-to-use: Focus on tasks instead of algorithms
+ Visual: Built-in, streaming visualizations to explore your data
+ Flexible: Supports text, images, audio, video and sensor data
+ Fast and Scalable: Work with large datasets on a single machine
+ Ready To Deploy: Export models to Core ML for use in iOS, macOS, watchOS, and tvOS apps
"""

data_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00529/diabetes_data_upload.csv"

!pip install turicreate

# Load Pkgs
import turicreate as tc

# Load Dataset
df = tc.SFrame(data_url)

# Preview Dataset
df.head()

# Check Datatype
df.dtype

# Plot the Value Count /Class Distribution
df['class'].show()

# Class/Target & Features
df.column_names()

feature_names = ['Age',
 'Gender',
 'Polyuria',
 'Polydipsia',
 'sudden weight loss',
 'weakness',
 'Polyphagia',
 'Genital thrush',
 'visual blurring',
 'Itching',
 'Irritability',
 'delayed healing',
 'partial paresis',
 'muscle stiffness',
 'Alopecia',
 'Obesity']

#### Split Dataset
train_data,test_data = df.random_split(0.7)

# Training
train_data.shape

# Original Shape
df.shape

# Build Model
lr_model = tc.logistic_classifier.create(train_data,target='class',features=feature_names)

# Get model summary
lr_model.summary()

### Model Evaluation
metrics = lr_model.evaluate(test_data)

metrics

type(metrics)

# Get Accuracy
metrics['accuracy']

#### Rules for Making Single Sample Prediction
+ Must be an SFrame

d = {'Age': 41,
 'Alopecia': 'Yes',
 'Gender': 'Male',
 'Genital thrush': 'No',
 'Irritability': 'No',
 'Itching': 'Yes',
 'Obesity': 'No',
 'Polydipsia': 'No',
 'Polyphagia': 'Yes',
 'Polyuria': 'Yes',
 'class': 'Positive',
 'delayed healing': 'Yes',
 'muscle stiffness': 'Yes',
 'partial paresis': 'No',
 'sudden weight loss': 'No',
 'visual blurring': 'No',
 'weakness': 'Yes'}

ex1 = tc.SFrame({'data':[d.values()]})

ex1

# Make Prediction
lr_model.predict(ex1)

# Prediction Prob
lr_model.classify(ex1)

# Save Model
lr_model.save('dm_risk_lr_classifier_27_may_2021.model')

### Thanks For Watching
### Jesus Saves @JCharisTech
### Jesse E.Agbe(JCharis)