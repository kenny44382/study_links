# -*- coding: utf-8 -*-
"""AutoML with Tpot in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QEazXGmZTZ2ybYStUEZQsUe6MqioKESA

## Automated ML using TPOT in Python
+ Genetic Algorithms: based on natural selection/survival of the fittest

#### Steps of Genetic Algorithms
+ Selection: find the best and fittest
+ Crossover: breed the best and the fittest to get a new generation
+ Mutation: mutate the offspring of the new generation till you get the best and fittest

### Pkgs
+ pip install tpot

#### Dependencies
+ scikit learn and numpy
"""

!pip install tpot

# Load Pkgs
import pandas as pd 
from sklearn.model_selection import train_test_split

data_url = "https://raw.githubusercontent.com/Jcharis/Machine-Learning-Web-Apps/master/Iris-Species-Predictor-ML-Flask-App-With-Materialize.css/data/iris.csv"

df = pd.read_csv(data_url)

df.head()

# Load Tpot
import tpot

# Methods and Attributes
dir(tpot)

df.shape

df.columns

d = {value:index for index, value in enumerate(df['species'].unique())}

d

df['new_label'] = df['species'].map(d)

df['new_label']

xfeatures = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]
ylabels = df['new_label']

# Split Our Dataset
x_train, x_test, y_train, y_test = train_test_split(xfeatures, ylabels, test_size=0.3, random_state=42)

x_train.shape

"""#### AutoML with TPOT for best parameters and algorithm"""

from tpot import TPOTClassifier

tpot = TPOTClassifier(generations=5, verbosity=2)

# Fit our Data
tpot.fit(x_train, y_train)

import numpy as np
ex2 = np.array([6.2,3.4,5.4,2.3]).reshape(1,-1)

# Prediction
tpot.predict(ex2)

d

# Check the accuracy
print(tpot.score(x_test, y_test))

# Export the Result 
tpot.export('tpot_iris_pipeline.py')

```python
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline, make_union
from tpot.builtins import StackingEstimator

# NOTE: Make sure that the outcome column is labeled 'target' in the data file
tpot_data = pd.read_csv('PATH/TO/DATA/FILE', sep='COLUMN_SEPARATOR', dtype=np.float64)
features = tpot_data.drop('target', axis=1)
training_features, testing_features, training_target, testing_target = \
            train_test_split(features, tpot_data['target'], random_state=None)

# Average CV score on the training set was: 0.980952380952381
exported_pipeline = make_pipeline(
    StackingEstimator(estimator=MultinomialNB(alpha=1.0, fit_prior=False)),
    RandomForestClassifier(bootstrap=True, criterion="gini", max_features=1.0, min_samples_leaf=7, min_samples_split=16, n_estimators=100)
)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)

```

# Thanks For Watching
# Jesus Saves @JCharisTech
# By Jesse E.Agbe(JCharis)